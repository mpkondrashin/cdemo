AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create an Amazon EKS Cluster to showcase File Security. https://github.com/mpkondrashin/cdemo/tree/main/containerized_file_security"

Parameters:
  ClusterName:
    Type: String
    Default: demo-eks-cluster
    Description: "EKS Cluster Name"

  NodeInstanceType:
    Type: String
    Default: t3.medium
    Description: "EC2 instance type for the worker nodes"

  NodeGroupSize:
    Type: Number
    Default: 2
    Description: "Number of worker nodes"

  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: "VPC CIDR block"

  Subnet1Cidr:
    Type: String
    Default: "10.0.1.0/24"
    Description: "CIDR for Subnet 1"

  Subnet2Cidr:
    Type: String
    Default: "10.0.2.0/24"
    Description: "CIDR for Subnet 2"

Resources:

  # VPC
  EKSVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-VPC"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EKSVpc
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EKSVpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Subnets
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EKSVpc
      CidrBlock: !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: owned
        - Key: kubernetes.io/role/elb
          Value: "1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EKSVpc
      CidrBlock: !Ref Subnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: owned
        - Key: kubernetes.io/role/elb
          Value: "1"

  # Subnet Route Table Association
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for EKS Cluster
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow EKS communication"
      VpcId: !Ref EKSVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # EKS Cluster IAM Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - eks.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-EKSRole"

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup

  # Node Group IAM Role
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-NodeInstanceRole"

  # EKS Managed Node Group
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: !Ref NodeGroupSize
      InstanceTypes:
        - !Ref NodeInstanceType
      Tags:
        Name: !Sub "${ClusterName}-NodeGroup"

Outputs:
  ClusterName:
    Description: "EKS Cluster Name"
    Value: !Ref ClusterName

  ClusterArn:
    Description: "ARN of the created EKS Cluster"
    Value: !GetAtt EKSCluster.Arn

  NodeGroupName:
    Description: "EKS Node Group Name"
    Value: !Ref EKSNodeGroup
