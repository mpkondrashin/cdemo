AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 Ubuntu in a new VPC with SSH access"

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance (use curl ifconfig.me)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}/\\d{1,2}"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  LatestUbuntuAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id

Resources:
  # --- Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MyUbuntuVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyUbuntuIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: MyUbuntuPublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MyUbuntuRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: MyUbuntuSG

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      ImageId: !Ref LatestUbuntuAmi
      Tags:
        - Key: Name
          Value: Ubuntu-SSH-Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -xe
          exec > >(tee -a /var/log/user-data.log) 2>&1
          echo "USERDATA START $(date)"

          cd /root

          # Update and install docker
          apt-get update -y
          apt-get install -y ca-certificates curl gnupg lsb-release
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          systemctl enable docker
          systemctl start docker
          usermod -aG docker ubuntu
          
          # Install tmfs-cli
          apt-get install -y curl tar
          curl -L "https://tmfs-cli.fs-sdk-ue1.xdr.trendmicro.com/tmfs-cli/latest/tmfs-cli_Linux_x86_64.tar.gz" -o tmfs-cli.tar.gz 
          tar -xzf tmfs-cli.tar.gz 
          echo -n "X5O!P%@AP[4\PZX54(P^)7CC)7}\$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!\$H+H*" > virus.com 
          
          # Install tmas-cli
          curl -O "https://cli.artifactscan.cloudone.trendmicro.com/tmas-cli/latest/tmas-cli_Linux_x86_64.tar.gz"
          tar -xzf tmas-cli_Linux_x86_64.tar.gz
          
          docker pull ubuntu:xenial-20161010
          docker save -o ubuntu-xenial-20161010.tar ubuntu:xenial-20161010
          
          curl -O https://rpmfind.net/linux/mageia/distrib/8/x86_64/media/core/release/firefox-78.7.0-1.mga8.x86_64.rpm
          curl -O https://github.com/openssl/openssl/releases/download/OpenSSL-engine-0_9_6/openssl-engine-0.9.6.tar.gz
          
          mkdir -p /root/libraries
          cp $(find /usr/lib/ -name '*so') /root/libraries

          echo "USERDATA END $(date)"
          git clone https://github.com/mpkondrashin/cdemo.git
          cd cdemo/file_security/fscan
          ./get_latest_go.sh
          source /etc/profile.d/go.sh
          go build
          

          
Outputs:
  VPCId:
    Description: VPC Id
    Value: !Ref VPC

  InstanceId:
    Description: EC2 Instance Id
    Value: !Ref EC2Instance

  PublicIP:
    Description: Public IP address of the new instance
    Value: !GetAtt EC2Instance.PublicIp
